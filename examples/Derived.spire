
----------------------------------------------------------------------

IType : Type -> Type
IType = \ I -> I -> Type

Scope : Tel -> Type
Scope = elimTel (\ _ -> Type) Unit (\ A B ih -> (a : A) * ih a)

----------------------------------------------------------------------

UncurriedScope : (T : Tel) -> (X : Scope T -> Type) -> Type
UncurriedScope = \ T X -> (xs : Scope T) -> X xs

CurriedScope : (T : Tel) -> (X : Scope T -> Type) -> Type
CurriedScope = elimTel
  (\ T -> (X : Scope T -> Type) -> Type)
  (\ X -> X tt)
  (\ A B ih X -> (a : A) -> ih a (\ b -> X (a , b)))

CurryScope : Tel -> Type
CurryScope = \ T -> (X : Scope T -> Type) ->
  UncurriedScope T X -> CurriedScope T X

curryScope : (T : Tel) -> CurryScope T
curryScope = elimTel CurryScope
  (\ X f -> f tt)
  (\ A B ih X f a -> ih a (\ b -> X (a , b)) (\ b -> f (a , b)))

UncurryScope : Tel -> Type
UncurryScope = \ T -> (X : Scope T -> Type) ->
  CurriedScope T X -> UncurriedScope T X

uncurryScope : (T : Tel) -> UncurryScope T
uncurryScope = elimTel UncurryScope
  (\ X x -> elimUnit X x)
  (\ A B ih X f -> elimPair A (\a -> Scope (B a)) X (\ a b -> ih a (\b -> X (a , b)) (f a) b))

----------------------------------------------------------------------

UncurriedBranches : (E : Enum) -> (P : Tag E -> Type) -> (X : Type) -> Type
UncurriedBranches = \ E P X -> Branches E P -> X

CurriedBranchesM : Enum -> Type
CurriedBranchesM = \ E -> (P : Tag E -> Type) -> Type -> Type

CurriedBranches : (E : Enum) -> CurriedBranchesM E
CurriedBranches = elimEnum CurriedBranchesM
  (\ P X -> X)
  (\ l E ih P X -> P here -> ih (\ t -> P (there t)) X)

CurryBranches : Enum -> Type
CurryBranches = \ E -> (P : Tag E -> Type) -> (X : Type) ->
  UncurriedBranches E P X -> CurriedBranches E P X

curryBranches : (E : Enum) -> CurryBranches E
curryBranches = elimEnum CurryBranches
  (\ P X f -> f tt)
  (\ l E ih P X f c -> ih (\ t -> P (there t)) X (\ cs -> f (c , cs)))

----------------------------------------------------------------------

UncurriedFunc : (I : Type) -> (D : Desc I) -> (X : IType I) -> Type
UncurriedFunc = \ I D X -> (i : I) -> Func I D X i -> X i

CurriedFuncM : (I : Type) -> Desc I -> Type
CurriedFuncM = \ I _ -> IType I -> Type

CurriedFunc : (I : Type) -> (D : Desc I) -> (X : IType I) -> Type
CurriedFunc = \ I -> elimDesc I (CurriedFuncM I)
  (\ i X -> X i)
  (\ i D ih X -> (x : X i) -> ih X)
  (\ A B ih X -> (a : A) -> ih a X)

CurryFunc : (I : Type) -> Desc I -> Type
CurryFunc = \ I D -> (X : IType I) -> UncurriedFunc I D X -> CurriedFunc I D X

curryFunc : (I : Type) -> (D : Desc I) -> CurryFunc I D
curryFunc = \ I -> elimDesc I (CurryFunc I)
  (\ i X cn -> cn i refl)
  (\ i D ih X cn x -> ih X (\ j xs -> cn j (x , xs)))
  (\ A B ih X cn a -> ih a X (\ j xs -> cn j (a , xs)))

----------------------------------------------------------------------

UncurriedHyps : (I : Type) -> (D : Desc I) -> (X : IType I)
  -> (P : (i : I) -> X i -> Type) -> UncurriedFunc I D X -> Type
UncurriedHyps = \ I D X P cn -> (i : I) -> (xs : Func I D X i)
  -> Hyps I D X P i xs -> P i (cn i xs)

CurriedHypsM : (I : Type) -> (D : Desc I) -> Type
CurriedHypsM = \ I D -> (X : IType I) -> (P : (i : I) -> X i -> Type)
  -> UncurriedFunc I D X -> Type

CurriedHyps : (I : Type) -> (D : Desc I) -> CurriedHypsM I D
CurriedHyps = \ I -> elimDesc I (CurriedHypsM I)
  (\ i X P cn -> P i (cn i refl))
  (\ i D ih X P cn -> (x : X i) -> P i x -> ih X P (\ j xs -> cn j (x , xs)))
  (\ A B ih X P cn -> (a : A) -> ih a X P (\ j xs -> cn j (a , xs)))

UncurryHyps : (I : Type) -> (D : Desc I) -> Type
UncurryHyps = \ I D -> (X : IType I) -> (P : (i : I) -> X i -> Type)
  -> (cn : UncurriedFunc I D X)
  -> CurriedHyps I D X P cn -> UncurriedHyps I D X P cn

-- TODO uncurryHyps

----------------------------------------------------------------------