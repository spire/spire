not : Bool -> Bool
not = \ b -> elimBool (\ _ -> Bool) false true b

unit : Unit
unit = tt

myFun : (b : Bool) -> Bool
myFun = \ b -> (not $ b)

foo : Type
foo = (b : Bool) * (elimBool (\_ -> Type) Bool Unit (not $ true))

bar : Unit -> Bool
bar = \ u -> elimBool (\_ -> Bool) true false (not true)

myType : Type
myType = (f : (b1 : Bool) -> Bool) -> ((u : Unit) -> (b2 : Bool) * (elimBool (\_ -> Type) Bool Unit (f $ true)))
