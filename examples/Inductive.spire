----------------------------------------------------------------------

NatN : String
NatN = "Nat"

NatP : Tel
NatP = Emp

NatI : Scope NatP -> Tel
NatI = \_ -> Emp

NatE : Enum
NatE = "zero" :: "suc" :: []

NatB : (p : Scope NatP) -> BranchesD NatE (NatI p)
NatB = \ _ -> End tt , Rec tt (End tt) , tt

Nat : Type
Nat = Form NatN NatP NatI NatE NatB

zero : Nat
zero = inj NatN NatP NatI NatE NatB here

suc : Nat -> Nat
suc = inj NatN NatP NatI NatE NatB (there here)

elimNat : (P : Nat -> Type) ->
  (pz : P zero) ->
  (ps : (n : Nat) -> P n -> P (suc n)) ->
  (n : Nat) -> P n
elimNat = elim NatN NatP NatI NatE NatB

----------------------------------------------------------------------

VecN : String
VecN = "Vec"

VecP : Tel
VecP = Ext Type \ _ -> Emp

VecI : Scope VecP -> Tel
VecI = \ _ -> Ext Nat \ _ -> Emp

VecE : Enum
VecE = "nil" :: "cons" :: []

VecB : (p : Scope VecP) -> BranchesD VecE (VecI p)
VecB = uncurryScope VecP (\ p -> BranchesD VecE (VecI p)) \ A
  -> End (zero , tt)
  ,  Arg Nat (\ n -> Arg A (\ _ -> Rec (n , tt) (End (suc n , tt))))
  , tt

Vec : (A : Type) -> Nat -> Type
Vec = Form VecN VecP VecI VecE VecB

nil : (A : Type) -> Vec A zero
nil = inj VecN VecP VecI VecE VecB here

cons : (A : Type) -> (n : Nat) -> (x : A) -> (xs : Vec A n) -> Vec A (suc n)
cons = inj VecN VecP VecI VecE VecB (there here)

elimVec : (A : Type) -> (P : (n : Nat) -> Vec A n -> Type) ->
  (pn : P zero (nil A)) ->
  (pc : (n : Nat) -> (x : A) -> (xs : Vec A n) -> P n xs -> P (suc n) (cons A n x xs)) ->
  (n : Nat) -> (xs : Vec A n) -> P n xs
elimVec = elim VecN VecP VecI VecE VecB

----------------------------------------------------------------------

add : Nat -> Nat -> Nat
add = elimNat (\ n -> Nat -> Nat)
  (\ n -> n)
  (\ m ih n -> suc (ih n))

mult : Nat -> Nat -> Nat
mult = elimNat (\ n -> Nat -> Nat)
  (\ n -> zero)
  (\ m ih n -> add n (ih n))

append : (A : Type) -> (m  : Nat) -> (n : Nat) -> Vec A m -> Vec A n -> Vec A (add m n)
append = \ A m n -> elimVec A
  (\ m xs -> (ys : Vec A n) -> Vec A (add m n))
  (\ ys -> ys)
  (\ m' x xs ih ys -> cons A (add m' n) x (ih ys))
  m

concat : (A : Type) -> (m : Nat) -> (n : Nat) -> Vec (Vec A m) n -> Vec A (mult n m)
concat = \ A m n -> elimVec (Vec A m)
  (\ n _ -> Vec A (mult n m))
  (nil A)
  (\ m' xs xss ih -> append A m (mult m' m) xs ih)
  n

----------------------------------------------------------------------

one : Nat
one = suc zero

two : Nat
two = suc one

three : Nat
three = suc two

one-two-nil : Vec Nat two
one-two-nil = cons Nat one one (cons Nat zero two (nil Nat))

three-nil : Vec Nat one
three-nil = cons Nat zero three (nil Nat)

one-two-three-nil : Vec Nat three
one-two-three-nil = cons Nat two one (cons Nat one two (cons Nat zero three (nil Nat)))

test-append : one-two-three-nil == append Nat two one one-two-nil three-nil
test-append = refl

----------------------------------------------------------------------
