
not : Bool -> Bool
not = \ b -> elimBool (\ _ -> Bool) false true b

myTrue : Bool
myTrue = true

If : Bool -> Type
If = \ b -> elimBool (\ _ -> Type) Bool Unit b

myFalse : If myTrue
myFalse = elimBool (\ _ -> Bool) false true myTrue

myFalse2 : Bool
myFalse2 = not myTrue

myPair : (b : Bool) * If (not b)
myPair = false, true

myFun : (b : Bool) -> elimBool (\ _ -> Type) Unit Bool b
myFun = \ b ->
  elimBool (\ x -> elimBool (\_ -> Type) Unit Bool x) tt false b
