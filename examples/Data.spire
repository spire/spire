
----------------------------------------------------------------------

BranchesD : Type -> Enum -> Type
BranchesD = \ I E -> Branches E (\ _ -> Desc I)

----------------------------------------------------------------------

NatE : Enum
NatE = "zero" :: "suc" :: []

NatT : Type
NatT = Tag NatE

zeroT : NatT
zeroT = here

sucT : NatT
sucT = there here

----------------------------------------------------------------------

NatB : BranchesD Unit NatE
NatB =
    End tt
  , Rec tt (End tt)
  , tt

NatD : Desc Unit
NatD = Arg NatT (\ t -> case NatE (\_ -> Desc Unit) NatB t)

Nat : Type
Nat = Fix "Nat" Unit Unit NatD tt tt

zero : Nat
zero = init (zeroT , refl)

suc : Nat -> Nat
suc = \ n -> init (sucT , n , refl)

----------------------------------------------------------------------

one : Nat
one = suc zero

two : Nat
two = suc one

three : Nat
three = suc two

----------------------------------------------------------------------

VecE : Enum
VecE = "nil" :: "cons" :: []

VecT : Type
VecT = Tag VecE

nilT : VecT
nilT = here

consT : VecT
consT = there here

----------------------------------------------------------------------

VecB : Type -> BranchesD Nat VecE
VecB = \ A ->
    End zero
  , Arg Nat (\ m -> Arg A (\ _ -> Rec m (End (suc m))))
  , tt

VecD : Type -> Desc Nat
VecD = \ A -> Arg VecT (\ t -> case VecE (\_ -> Desc Nat) (VecB A) t)

Vec : Type -> Nat -> Type
Vec = \ A -> \ n -> Fix "Vec" Type Nat (VecD A) A n

nil : (A : Type) -> Vec A zero
nil = \ _ -> init (nilT , refl)

cons : (A : Type) -> (n : Nat) -> (x : A) -> (xs : Vec A n) -> Vec A (suc n)
cons = \ _ n x xs -> init (consT , n , x , xs , refl)

----------------------------------------------------------------------