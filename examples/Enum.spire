
append : Enum -> Enum -> Enum
append = elimEnum (\_ -> Enum -> Enum)
  (\ ys -> ys)
  (\ x -> \ xs -> \ ih -> \ ys -> x :: ih ys)

ab : Enum
ab = "a" :: "b" :: []

cd : Enum
cd = "c" :: "d" :: []

abcd : Enum
abcd = "a" :: "b" :: "c" :: "d" :: []

testAppend : abcd == append ab cd
testAppend = refl

a : Tag abcd
a = here

c : Tag abcd
c = there (there here)

myTrue : Bool
myTrue = case abcd (\_ -> Bool) (false , false , true , false , tt) c

testCase : myTrue == true
testCase = refl

